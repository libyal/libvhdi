environment:
  nuget_token:
    secure: l8kGPdWSs3RTcW6B+mgcT8ByCdVvXx6HbWPNd8nnqoUDhku8g507tpxla7LUPDOM
  PYPI_TOKEN:
    secure: VHuZiUWgTqTciKE2nsv/LsYcNyjwcFenqlqX5p+UACmt+0q8IEl8w0HuUwhAuUK3AEMmFu+OCU+F/6AKDN7pTlc6NPHVR23NYMrjd18VPvGwHbxuDokU+XhuBwgw0XhjwUAQWS51+2plL01jJDr63A//tByOyaYuCAWfWYVJivwClx4efB3Ii8xc0AaM1NfW0Tfkl8oNCNIv8ISHrhzrXOFzqx0iiTX9/6Hh8R29OzMFKG361CFXX+K7aNyKV38mouMt7Ao6Dgfaze8xoQYgOw==
  matrix:
  - TARGET: vs2008
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 9.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2010
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 10.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2012
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 11.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2013
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2013
    VisualStudioVersion: 12.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python37"
  - TARGET: vs2015
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2015
    VisualStudioVersion: 14.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python38"
  - TARGET: vs2017
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2017
    VisualStudioVersion: 15.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python38"
  - TARGET: vs2019
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    VisualStudioVersion: 16.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python311"
  - TARGET: vs2022
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    platform: Win32
    configuration: Release
    PYTHON_PATH: "C:\\Python311"
  - TARGET: vs2022-vsdebug
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    platform: Win32
    configuration: VSDebug
    PYTHON_PATH: "C:\\Python311"
  - TARGET: vs2022-x64
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    platform: x64
    configuration: Release
    PYTHON_PATH: "C:\\Python311"
  - TARGET: vs2022-python
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    platform: x64
    configuration: Release
    PYTHON_PATH: "C:\\Python311-x64"
  - TARGET: vs2022-nuget
    BUILD_ENVIRONMENT: msbuild
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    VisualStudioVersion: 17.0
    configuration: Release
    PYTHON_PATH: "C:\\Python311"
  - TARGET: macos-x64-clang
    BUILD_ENVIRONMENT: xcode
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    CC: clang
    CFLAGS: "-I/usr/local/include"
    LDFLAGS: "-L/usr/local/lib"
    CONFIGURE_OPTIONS: ""
  - TARGET: macos-x64-gcc
    BUILD_ENVIRONMENT: xcode
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    CC: gcc
    CFLAGS: "-I/usr/local/include"
    LDFLAGS: "-L/usr/local/lib"
    CONFIGURE_OPTIONS: ""
  - TARGET: macos-x64-gcc-python
    BUILD_ENVIRONMENT: xcode
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    PYTHON: "/usr/local/opt/python@3.11/bin/python3"
    PYTHON_CONFIG: "/usr/local/opt/python@3.11/bin/python3-config"
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    CC: gcc
    CFLAGS: "-I/usr/local/include"
    LDFLAGS: "-L/usr/local/lib"
    CONFIGURE_OPTIONS: "--enable-python"
  - TARGET: macos-pkgbuild
    BUILD_ENVIRONMENT: xcode
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    PYTHON: "/usr/local/opt/python@3.11/bin/python3"
    PYTHON_CONFIG: "/usr/local/opt/python@3.11/bin/python3-config"
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    CC: gcc
    CFLAGS: "-I/usr/local/include"
    LDFLAGS: "-L/usr/local/lib"
    CONFIGURE_OPTIONS: "--disable-dependency-tracking --prefix=/usr/local --enable-python --with-pyprefix"
  - TARGET: python311
    BUILD_ENVIRONMENT: python
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    PYTHON: "C:\\Python311\\python.exe"
  - TARGET: python311-x64
    BUILD_ENVIRONMENT: python
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    PYTHON: "C:\\Python311-x64\\python.exe"
  - TARGET: macos-tox-py38
    BUILD_ENVIRONMENT: python-tox
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    PYTHON_VERSION: 3.8
    TOXENV: py38
  - TARGET: macos-tox-py39
    BUILD_ENVIRONMENT: python-tox
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    PYTHON_VERSION: 3.9
    TOXENV: py39
  - TARGET: macos-tox-py310
    BUILD_ENVIRONMENT: python-tox
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    PYTHON_VERSION: 3.10
    TOXENV: py310
  - TARGET: macos-tox-py311
    BUILD_ENVIRONMENT: python-tox
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    PYTHON_VERSION: 3.11
    TOXENV: py311
  - TARGET: macos-tox-py312
    BUILD_ENVIRONMENT: python-tox
    APPVEYOR_BUILD_WORKER_IMAGE: macos-monterey
    HOMEBREW_NO_INSTALL_CLEANUP: 1
    PYTHON_VERSION: 3.12
    TOXENV: py312
  - TARGET: cygwin64-gcc
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: ""
  - TARGET: cygwin64-gcc-no-optimization
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-shared=no"
    CFLAGS: "--coverage -O0"
    CPPFLAGS: "-DOPTIMIZATION_DISABLED"
    LDFLAGS: "--coverage"
  - TARGET: cygwin64-gcc-python
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-python"
  - TARGET: cygwin64-gcc-python3
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-python3"
    PYTHON_VERSION: 3
  - TARGET: cygwin64-gcc-static-executables
    BUILD_ENVIRONMENT: cygwin64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-static-executables"
  - TARGET: mingw-w64-gcc
    BUILD_ENVIRONMENT: mingw-w64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: ""
  - TARGET: mingw-w64-gcc-no-optimization
    BUILD_ENVIRONMENT: mingw-w64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-shared=no"
    CFLAGS: "--coverage -O0"
    CPPFLAGS: "-DOPTIMIZATION_DISABLED"
    LDFLAGS: "--coverage"
  - TARGET: mingw-w64-gcc-static-executables
    BUILD_ENVIRONMENT: mingw-w64
    APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2022
    CONFIGURE_OPTIONS: "--enable-static-executables"

install:
- cmd: if [%BUILD_ENVIRONMENT%]==[msbuild] (
    git clone https://github.com/libyal/vstools.git ..\vstools )
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild") {
    If ( ( "vs2008", "vs2010", "vs2012", "vs2013", "vs2015" ).Contains( $env:TARGET ) ) {
      .\syncdokan.ps1 -UseLegacyVersion }
    Else {
      .\syncdokan.ps1 }
    }
- cmd: if [%TARGET%]==[vs2010] (
    pushd ..\dokan &&
    set PYTHONPATH=..\vstools &&
    C:\Python37\python.exe ..\vstools\scripts\msvscpp-convert.py --no-python-dll --output-format 2010 msvscpp\dokan.sln &&
    rd /q /s msvscpp &&
    ren vs2010 msvscpp &&
    popd )
- cmd: if [%TARGET%]==[vs2012] (
    pushd ..\dokan &&
    set PYTHONPATH=..\vstools &&
    C:\Python37\python.exe ..\vstools\scripts\msvscpp-convert.py --no-python-dll --extend-with-x64 --output-format 2012 msvscpp\dokan.sln &&
    rd /q /s msvscpp &&
    ren vs2012 msvscpp &&
    popd )
- cmd: if [%TARGET%]==[vs2013] (
    pushd ..\dokan &&
    set PYTHONPATH=..\vstools &&
    C:\Python37\python.exe ..\vstools\scripts\msvscpp-convert.py --output-format 2013 msvscpp\dokan.sln &&
    rd /q /s msvscpp &&
    ren vs2013 msvscpp &&
    popd )
- cmd: if [%TARGET%]==[vs2015] (
    pushd ..\dokan &&
    set PYTHONPATH=..\vstools &&
    C:\Python37\python.exe ..\vstools\scripts\msvscpp-convert.py --output-format 2015 msvscpp\dokan.sln &&
    rd /q /s msvscpp &&
    ren vs2015 msvscpp &&
    popd )
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild") {
    If ( ( "vs2008", "vs2010", "vs2012", "vs2013", "vs2015" ).Contains( $env:TARGET ) ) {
      .\builddokan.ps1 -UseLegacyVersion }
    Else {
      $Configuration = $env:CONFIGURATION;
      If (${Configuration} -eq "VSDebug") {
        $Configuration = "Debug" }
      .\builddokan.ps1 -Configuration ${Configuration} -Platform "Win32";
      .\builddokan.ps1 -Configuration ${Configuration} -Platform "x64"; }
    }
- sh: if test ${BUILD_ENVIRONMENT} = "python-tox" || test ${BUILD_ENVIRONMENT} = "xcode"; then brew update-reset && brew update -q; fi
- sh: if test ${BUILD_ENVIRONMENT} = "python-tox" || test ${BUILD_ENVIRONMENT} = "xcode"; then brew install -q gettext gnu-sed || true; fi
- sh: if test ${BUILD_ENVIRONMENT} = "python-tox"; then brew install -q python@${PYTHON_VERSION} tox twine-pypi || true; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[python] (
    "%PYTHON%" -m pip install -U pip setuptools twine wheel )
- ps: If ($env:BUILD_ENVIRONMENT -eq "cygwin64") {
    (New-Object Net.WebClient).DownloadFile("https://cygwin.com/setup-x86_64.exe", "C:\\cygwin64\\setup-x86_64.exe") }
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    C:\cygwin64\setup-x86_64.exe -qgnNdO -l C:\cygwin64\var\cache\setup -R c:\cygwin64 -s http://cygwin.mirror.constant.com -P gettext-devel -P wget -P python3-devel )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    C:\msys64\usr\bin\pacman -S --noconfirm --needed autoconf automake gettext-devel libtool make mingw-w64-x86_64-gcc )
- ps: If ( ( "cygwin64-gcc-no-optimization", "mingw-w64-gcc-no-optimization" ).Contains( $env:TARGET ) ) {
    $ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://uploader.codecov.io/latest/windows/codecov.exe -Outfile ..\codecov.exe }

build_script:
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild" -or ($env:BUILD_ENVIRONMENT -eq "python" -and $isWindows)) {
    .\synclibs.ps1;
    .\autogen.ps1 }
- ps: If ($env:TARGET -eq "vs2008") {
    .\build.ps1 -VisualStudioVersion 2008 -PythonPath $env:PYTHON_PATH -VSToolsOptions "--no-python-dll" }
- ps: If ( ( "vs2010", "vs2012", "vs2013", "vs2015" ).Contains( $env:TARGET ) ) {
    .\build.ps1 -VisualStudioVersion $env:TARGET.Substring(2, 4) -Configuration $env:CONFIGURATION -Platform $env:PLATFORM -PythonPath $env:PYTHON_PATH -VSToolsOptions "--extend-with-x64 --no-python-dll" }
- ps: If ( ( "vs2017", "vs2019", "vs2022", "vs2022-vsdebug", "vs2022-x64" ).Contains( $env:TARGET ) ) {
    .\build.ps1 -VisualStudioVersion $env:TARGET.Substring(2, 4) -Configuration $env:CONFIGURATION -Platform $env:PLATFORM -PythonPath $env:PYTHON_PATH -VSToolsOptions "--extend-with-x64 --no-python-dll --with-dokany" }
- ps: If ($env:TARGET -eq "vs2022-python") {
    .\build.ps1 -VisualStudioVersion $env:TARGET.Substring(2, 4) -Configuration $env:CONFIGURATION -Platform $env:PLATFORM -PythonPath $env:PYTHON_PATH -VSToolsOptions "--extend-with-x64 --python-path $env:PYTHON_PATH --with-dokany" }
- ps: If ($env:TARGET -eq "vs2022-nuget") {
    .\build.ps1 -VisualStudioVersion $env:TARGET.Substring(2, 4) -Configuration $env:CONFIGURATION -Platform Win32 -PythonPath $env:PYTHON_PATH -VSToolsOptions "--extend-with-x64 --no-python-dll --with-dokany";
    .\build.ps1 -VisualStudioVersion $env:TARGET.Substring(2, 4) -Configuration $env:CONFIGURATION -Platform x64 -PythonPath $env:PYTHON_PATH -VSToolsOptions "--extend-with-x64 --no-python-dll --with-dokany" }
- cmd: if [%TARGET%]==[vs2022-nuget] (
    move msvscpp vs2008 &&
    move vs2022 msvscpp &&
    nuget pack libvhdi.nuspec )
- sh: if test ${BUILD_ENVIRONMENT} = "xcode"; then export PATH="/usr/local/opt/gettext/bin:$PATH"; export SED="/usr/local/bin/gsed"; tests/build.sh ${CONFIGURE_OPTIONS}; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[python] (
    "%PYTHON%" setup.py bdist_wheel )
- sh: if test ${BUILD_ENVIRONMENT} = "python-tox"; then export PATH="/usr/local/opt/gettext/bin:$PATH"; export SED="/usr/local/bin/gsed"; ./synclibs.sh && ./autogen.sh && ./configure --disable-nls --disable-shared-libs && make >/dev/null && tox -e${TOXENV}; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    xcopy /i /q /s C:\projects\libvhdi C:\cygwin64\home\appveyor\libvhdi &&
    C:\cygwin64\bin\bash -e -l -c "cd libvhdi && wget -q 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD' -O './config.guess' && wget -q 'http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD' -O './config.sub'" &&
    C:\cygwin64\bin\bash -e -l -c "cd libvhdi && tests/build.sh ${CONFIGURE_OPTIONS}" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    xcopy /i /q /s C:\projects\libvhdi C:\msys64\home\appveyor\libvhdi &&
    C:\msys64\usr\bin\bash -e -l -c "cd libvhdi && tests/build.sh ${CONFIGURE_OPTIONS}" )

test_script:
- cmd: rem Run tests
- ps: If ($env:BUILD_ENVIRONMENT -eq "msbuild") {
    .\runtests.ps1 }
- sh: if test ${BUILD_ENVIRONMENT} = "xcode" && test ${TARGET} != "macos-pkgbuild"; then tests/runtests.sh; fi
- sh: if test ${TARGET} = "macos-pkgbuild"; then tests/pkgbuild.sh; fi
- cmd: if [%BUILD_ENVIRONMENT%]==[cygwin64] (
    C:\cygwin64\bin\bash -l -c "cd libvhdi && tests/runtests.sh" )
- cmd: if [%BUILD_ENVIRONMENT%]==[mingw-w64] (
    C:\msys64\usr\bin\bash -l -c "cd libvhdi && tests/runtests.sh" )

after_test:
- cmd: if [%TARGET%]==[cygwin64-gcc-no-optimization] (
    C:\cygwin64\bin\bash -e -l -c "cd libvhdi && for DIRECTORY in `find . -maxdepth 1 -type d`; do (cd ${DIRECTORY} && find . -maxdepth 1 -name \*.gcno -type f -exec gcov -pb {} \;) done" &&
    C:\projects\codecov.exe -R \cygwin64\home\appveyor\libvhdi --name %TARGET% )
- cmd: if [%TARGET%]==[mingw-w64-gcc-no-optimization] (
    C:\msys64\usr\bin\bash -e -l -c "cd libvhdi && for DIRECTORY in `find . -maxdepth 1 -type d`; do (cd ${DIRECTORY} && find . -maxdepth 1 -name \*.gcno -type f -exec gcov -pb {} \;) done" &&
    C:\projects\codecov.exe -R \msys64\home\appveyor\libvhdi --name %TARGET% )

artifacts:
- path: \*.nupkg
- path: dist\*.whl

deploy_script:
- ps: If ($env:APPVEYOR_REPO_TAG -eq "true" -and $isWindows -and $env:TARGET -eq "vs2022-nuget") {
    Invoke-Expression "nuget push *.nupkg -NonInteractive -NoSymbols -Source https://api.nuget.org/v3/index.json -ApiKey ${env:NUGET_TOKEN}" }
- ps: If ($env:APPVEYOR_REPO_TAG -eq "true" -and $isWindows -and $env:BUILD_ENVIRONMENT -eq "python") {
    Invoke-Expression "${env:PYTHON} -m twine upload dist/*.whl --username __token__ --password ${env:PYPI_TOKEN} --skip-existing" }
- sh: if test ${APPVEYOR_REPO_TAG} = "true" && test ${BUILD_ENVIRONMENT} = "python-tox"; then twine upload dist/*.whl --username __token__ --password ${PYPI_TOKEN} --skip-existing; fi

